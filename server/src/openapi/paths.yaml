/v1/users/login:
  post:
    summary: Sign in
    description: Allows a user to login to the application.
    tags:
      - Sign in
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/LoginInput"
          example:
            username: "raulbalrod"
            password: "1234"

    responses:
      "200":
        description: Successful login
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      "401":
        description: Invalid credentials
        content:
          application/json:
            example:
              message: "Invalid username or password"

/v1/users:
  post:
    summary: Create a new user
    description: Allow create a new user
    tags:
      - Create Account
    security:
      - JWT: []
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserInput"
          example:
            username: "manuel paco"
            email: "manuelpaco@example.com"
            password: "1234"
    responses:
      "201":
        description: User created successfully
        schema:
          $ref: "#/components/schemas/UserWithToken"
      "401":
        description: Invalid token
      "500":
        description: Server Error

  get:
    summary: Retrieve a list of users
    description: Returns a list of users, optionally filtered by name.
    tags:
      - Users
    security:
      - JWT: []
    parameters:
      - in: query
        name: name
        schema:
          type: string
        description: Name filter for the users.
        required: false
    responses:
      "200":
        description: A JSON array of users
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/User"
      "500":
        description: Server Error

/v1/users/basicUser:
  post:
    summary: Create a new basic user
    description: Allow create a new basic user
    tags:
      - Create Account
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserInput"
          example:
            username: "ayoze"
            email: "ayoze@example.com"
            password: "1234"
    responses:
      "201":
        description: Basic user created successfully
        schema:
          $ref: "#/components/schemas/UserWithToken"
      "500":
        description: Server Error

/v1/users/premiumUser:
  post:
    summary: Create a new premium user
    description: Allow create a new premium user
    tags:
      - Create Account
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserInput"
          example:
            username: "valorate"
            email: "valorate@example.com"
            password: "1234"
    responses:
      "201":
        description: Premium user created successfully
        schema:
          $ref: "#/components/schemas/UserWithToken"
      "500":
        description: Server Error

/v1/users/{id}:
  patch:
    summary: Update a user
    description: Updates the details of a user specified by the user ID.
    tags:
      - Users
    security:
      - JWT: []
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: The unique identifier of the user.
      - in: body
        name: user
        required: true
        description: User data that needs to be updated.
        schema:
          type: object
          properties:
            username:
              type: string
              description: The new username of the user.
            email:
              type: string
              format: email
              description: The new email address of the user.
          example:
            username: "newUsername"
            email: "new.email@example.com"
    responses:
      "200":
        description: Successfully updated user
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Successfully updated user"
                user:
                  $ref: "#/components/schemas/User"
      "403":
        description: You do not have permission to edit this user
      "404":
        description: User not found
      "500":
        description: Server Error

  delete:
    summary: Delete a user
    description: Deletes the user specified by the user ID.
    tags:
      - Users
    security:
      - JWT: []
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: The unique identifier of the user.
    responses:
      "200":
        description: Successfully deleted user
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Successfully deleted user"
      "403":
        description: You are not authorized to access this resource
      "404":
        description: User not found
      "500":
        description: Server Error

/v1/users/{id}/role:
  patch:
    summary: Change the user role
    description: Change the user role Basic <--> Premium
    tags:
      - Users
    security:
      - JWT: []
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: The unique identifier of the user.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              newRole:
                type: string
                description: The new role to be assigned to the user.
                enum:
                  - Basic
                  - Premium
            example:
              newRole: "Basic"
    responses:
      "200":
        description: Role updated successfully
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Role updated successfully"
                user:
                  $ref: "#/components/schemas/User"
      "400":
        description: New role is required
      "401":
        description: Unauthorized (invalid or missing token).
      "403":
        description: You dont have permission to that
      "404":
        description: User not found
      "500":
        description: Server Error

/v1/users/{id}/books:
  post:
    summary: Add a book to the user's book list
    description: Adds a specified book to the specified user's book list, if it's not already included.
    tags:
      - My List
    security:
      - JWT: []
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
        description: The id of the user to whom the book will be added.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              bookId:
                type: string
                format: uuid
                description: The ID of the book to add to the user's list.
            example:
              bookId: "65e8b4be86c68e5f2c3c4d69"
    responses:
      "200":
        description: The book has been successfully added to the user's list.
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "The book has been successfully added to the user's list"
      "400":
        description: The book is already in the user's list.
      "401":
        description: Invalid token
      "404":
        description: User not found.
      "500":
        description: Server Error

/v1/users/{username}/books:
  get:
    summary: Retrieve the book list of a user
    description: Fetches a list of books associated with a given username.
    tags:
      - My List
    security:
      - JWT: []
    parameters:
      - in: path
        name: username
        required: true
        schema:
          type: string
        description: The username of the user whose book list is to be retrieved.
    responses:
      "200":
        description: A list of books associated with the user.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Book"
      "404":
        description: User not found.
      "401":
        description: Unauthorized (invalid or missing token).
      "500":
        description: Server Error

/v1/users/{id}/books/remove:
  post:
    summary: Remove a book from the user's book list
    description: Removes a specified book from the specified user's book list if it exists.
    tags:
      - My List
    security:
      - JWT: []
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          description: The unique identifier of the user from whose list the book will be removed.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              bookId:
                type: string
                format: uuid
                description: The unique identifier of the book to be removed from the user's list.
            example:
              bookId: "65e8b4be86c68e5f2c3c4d69"
    responses:
      "200":
        description: he book has been successfully removed from the user's list.
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Book successfully removed from the user's list"
      "401":
        description: Invalid token
      "404":
        description: User not found.
      "500":
        description: Server Error

/v1/users/{id}/book:
  patch:
    summary: Update the status of a book in the user's list
    description: Updates the personal status of a specific book in a user's book list.
    tags:
      - My List
    security:
      - JWT: []
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
          description: The unique identifier of the user whose book status is to be updated.
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              bookId:
                type: string
                format: uuid
                description: The unique identifier of the book whose status is to be updated.
              newStatus:
                type: string
                description: The new status to set for the book, e.g., 'Leyendo', 'Futuras lecturas', 'Leído'.
            example:
              bookId: "65e8b48286c68e5f2c3c4d65"
              newStatus: "Leído"
    responses:
      "200":
        description: Book status updated successfully.
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                  example: "Book status updated successfully"
                user:
                  $ref: "#/components/schemas/User"
      "401":
        description: Invalid token
      "404":
        description: User or book not found.
      "500":
        description: Internal server error with details on what went wrong.
